package com.updevelop.wellness_z_mvvm;

import android.os.Bundle;
import android.util.Log;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.BroadcastReceiver;
import android.location.LocationManager;
import androidx.annotation.NonNull;
import io.flutter.embedding.android.FlutterFragmentActivity;
import io.flutter.embedding.engine.FlutterEngine;
import io.flutter.plugin.common.MethodChannel;
import com.omronhealthcare.OmronConnectivityLibrary.OmronLibrary.LibraryManager.OmronPeripheralManager;
import com.omronhealthcare.OmronConnectivityLibrary.OmronLibrary.Model.OmronPeripheral;
import com.omronhealthcare.OmronConnectivityLibrary.OmronLibrary.Model.OmronErrorInfo;
import com.omronhealthcare.OmronConnectivityLibrary.OmronLibrary.DeviceConfiguration.OmronPeripheralManagerConfig;
import com.omronhealthcare.OmronConnectivityLibrary.OmronLibrary.OmronUtility.OmronConstants;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MainActivity extends FlutterFragmentActivity {
    private static final String CHANNEL = "omron_channel";
    private OmronPeripheral currentPeripheral;
    private List<OmronPeripheral> lastScannedPeripherals;
    private String currentUserHashId = "testuser@wellnessz.com"; // Default user hash ID
    private static final String PREFS = "OMRON_PREFS";
    private static final String KEY_PAIRED_ADDR = "paired_device_address";


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.e("OMRON", "Initializing...");
        OmronPeripheralManager.sharedManager(this)
                .setAPIKey("B7231051-501E-4CD6-8589-5394985B9E41", null);
        Log.e("OMRON", "API Key set");
        OmronPeripheralManagerConfig config = new OmronPeripheralManagerConfig();
        config.userHashId = currentUserHashId;
        config.timeoutInterval = 90;
        OmronPeripheralManager.sharedManager(this).setConfiguration(config);
        try {
            OmronPeripheralManager.sharedManager(this).startManager();
            Log.e("OMRON", "Manager started");
        } catch (Exception e) {
            Log.e("OMRON", "startManager() failed: " + e.getMessage());
        }
        // ✅ Register Bluetooth pairing receiver
        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_PAIRING_REQUEST);
        filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);
        registerReceiver(mPairingRequestReceiver, filter);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        // ✅ Unregister pairing receiver to avoid leaks
        unregisterReceiver(mPairingRequestReceiver);
    }

    @Override
    public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {
        super.configureFlutterEngine(flutterEngine);
        new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)
                .setMethodCallHandler((call, result) -> {
                    switch (call.method) {
                        case "startScan":
                            startScan(result);
                            break;
                        case "connectDevice":
                            HashMap<String, Object> args = (HashMap<String, Object>) call.arguments;
                            String identifier = (String) args.get("identifier");
                            HashMap<String, Object> userSettings = (HashMap<String, Object>) args.get("userSettings");
                            connectToDevice(result, identifier, userSettings);
                            break;
                        case "transferData":
                            transferData(result);
                            break;
                        case "setUserHashId":
                            String userHashId = (String) call.arguments;
                            setUserHashId(userHashId, result);
                            break;
                        case "startMeasurement": // New method to trigger measurement if supported
                            startMeasurement(result);
                            break;
                        default:
                            result.notImplemented();
                    }
                });
    }

    private void startScan(MethodChannel.Result result) {
        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        if (bluetoothAdapter == null || !bluetoothAdapter.isEnabled()) {
            result.error("BLUETOOTH_ERROR", "Bluetooth not available/enabled.", null);
            return;
        }
        LocationManager lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        boolean gpsEnabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);
        boolean networkEnabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
        if (!gpsEnabled && !networkEnabled) {
            result.error("LOCATION_OFF", "Location services are not enabled.", null);
            return;
        }
        Log.e("OMRON", "Scanning...");

        OmronPeripheralManagerConfig config = OmronPeripheralManager.sharedManager(this).getConfiguration();
        config.userHashId = currentUserHashId;
        OmronPeripheralManager.sharedManager(this).setConfiguration(config);

        final boolean[] hasReplied = {false};
        OmronPeripheralManager.sharedManager(this)
                .startScanPeripherals((peripherals, errorInfo) -> {
                    if (hasReplied[0]) return;
                    if (errorInfo != null && !errorInfo.isSuccess()) {
                        result.error("SCAN_ERROR", errorInfo.getMessageInfo(), null);
                        hasReplied[0] = true;
                        return;
                    }
                    if (peripherals == null || peripherals.isEmpty()) {
                        result.error("NO_DEVICES", "No devices found.", null);
                        hasReplied[0] = true;
                        return;
                    }

                    // ✅ Check for previously paired identifier (saved localName)
                    String knownName = getSharedPreferences(PREFS, MODE_PRIVATE).getString(KEY_PAIRED_ADDR, null);
                    SharedPreferences prefs = getSharedPreferences(PREFS, MODE_PRIVATE);
                    String userHeight = prefs.getString("user_height", null);
                    String userGender = prefs.getString("user_gender", null);
                    String userDob = prefs.getString("user_dob", null);

                    if (userHeight != null && userGender != null && userDob != null) {
                        HashMap<String, Object> settings = new HashMap<>();
                        settings.put(OmronConstants.OMRONDevicePersonalSettings.UserHeightKey, userHeight);

                        if ("Male".equalsIgnoreCase(userGender)) {
                            settings.put(OmronConstants.OMRONDevicePersonalSettings.UserGenderKey,
                                    OmronConstants.OMRONDevicePersonalSettingsUserGenderType.Male);
                        } else {
                            settings.put(OmronConstants.OMRONDevicePersonalSettings.UserGenderKey,
                                    OmronConstants.OMRONDevicePersonalSettingsUserGenderType.Female);
                        }

                        settings.put(OmronConstants.OMRONDevicePersonalSettings.UserDateOfBirthKey, userDob);

                        HashMap<String, HashMap> omronUserSettings = new HashMap<>();
                        omronUserSettings.put(OmronConstants.OMRONDevicePersonalSettingsKey, settings);
                        ArrayList<HashMap> deviceSettings = new ArrayList<>();
                        deviceSettings.add(omronUserSettings);

//                        OmronPeripheralManagerConfig config = OmronPeripheralManager.sharedManager(this).getConfiguration();
                        config.deviceSettings = deviceSettings;
                        OmronPeripheralManager.sharedManager(this).setConfiguration(config);
                    }

                    // If no auto-connect, just return scanned list
                    ArrayList<Map<String, String>> deviceList = new ArrayList<>();
                    for (OmronPeripheral p : peripherals) {
                        HashMap<String, String> deviceInfo = new HashMap<>();
                        deviceInfo.put("name", p.getLocalName());
                        deviceInfo.put("identifier", p.getLocalName());
                        deviceList.add(deviceInfo);
                    }
                    lastScannedPeripherals = peripherals;
                    result.success(deviceList);
                    hasReplied[0] = true;
                });
    }


    private void connectToDevice(MethodChannel.Result result, String identifier, HashMap<String, Object> userSettings) {
        if (lastScannedPeripherals == null || lastScannedPeripherals.isEmpty()) {
            result.error("NO_DEVICE", "No scanned devices. You must scan before connecting.", null);
            return;
        }

        OmronPeripheral targetPeripheral = null;
        for (OmronPeripheral p : lastScannedPeripherals) {
            Log.d("OMRON", "Checking peripheral: Name=" + p.getLocalName());
            if (p.getLocalName() != null && p.getLocalName().equalsIgnoreCase(identifier)) {
                targetPeripheral = p;
                break;
            }
        }
        if (targetPeripheral == null) {
            result.error("NO_DEVICE", "Device not found in scanned devices.", null);
            return;
        }

        Log.e("OMRON", "Connecting to " + identifier);
        OmronPeripheralManagerConfig config = OmronPeripheralManager.sharedManager(this).getConfiguration();
        config.userHashId = currentUserHashId;

        // ✅ Apply user settings if provided
        if (userSettings != null) {
            HashMap<String, Object> settings = new HashMap<>();
            if (userSettings.containsKey("height")) {
                settings.put(OmronConstants.OMRONDevicePersonalSettings.UserHeightKey, userSettings.get("height"));
            }
            if (userSettings.containsKey("gender")) {
                String gender = (String) userSettings.get("gender");
                if ("Male".equalsIgnoreCase(gender)) {
                    settings.put(OmronConstants.OMRONDevicePersonalSettings.UserGenderKey, OmronConstants.OMRONDevicePersonalSettingsUserGenderType.Male);
                } else if ("Female".equalsIgnoreCase(gender)) {
                    settings.put(OmronConstants.OMRONDevicePersonalSettings.UserGenderKey, OmronConstants.OMRONDevicePersonalSettingsUserGenderType.Female);
                }
            }
            if (userSettings.containsKey("dateOfBirth")) {
                settings.put(OmronConstants.OMRONDevicePersonalSettings.UserDateOfBirthKey, userSettings.get("dateOfBirth"));
            }

            HashMap<String, HashMap> omronUserSettings = new HashMap<>();
            omronUserSettings.put(OmronConstants.OMRONDevicePersonalSettingsKey, settings);
            ArrayList<HashMap> deviceSettings = new ArrayList<>();
            deviceSettings.add(omronUserSettings);
            config.deviceSettings = deviceSettings;
        }

        OmronPeripheralManager.sharedManager(this).setConfiguration(config);

        final boolean[] hasReplied = {false};
        OmronPeripheralManager.sharedManager(this)
                .connectPeripheral(targetPeripheral, true, (p, errorInfo) -> {
                    if (hasReplied[0]) return;
                    hasReplied[0] = true;
                    if (errorInfo.isSuccess()) {
                        currentPeripheral = p;
                        result.success("Connected to " + p.getLocalName());

                        // ✅ Save for auto-connect next time (using localName)
                        getSharedPreferences(PREFS, MODE_PRIVATE)
                                .edit()
                                .putString(KEY_PAIRED_ADDR, p.getLocalName())
                                .apply();
                    } else {
                        result.error("CONNECT_FAILED", errorInfo.getMessageInfo(), null);
                    }
                });
    }


    private void startMeasurement(MethodChannel.Result result) {
        if (currentPeripheral == null) {
            result.error("NO_DEVICE", "No connected device to start measurement.", null);
            return;
        }
        Log.e("OMRON", "Attempting to start measurement on " + currentPeripheral.getLocalName() + "...");
        result.success("Measurement initiated (user should stand on machine).");
    }

    private void transferData(MethodChannel.Result result) {
        if (currentPeripheral == null) {
            result.error("NO_DEVICE", "No connected device.", null);
            return;
        }
        Log.e("OMRON", "Fetching stored measurement data for " + currentUserHashId + "...");
        OmronPeripheralManagerConfig config = OmronPeripheralManager.sharedManager(this).getConfiguration();
        config.userHashId = currentUserHashId; 
        config.enableAllDataRead = true;
        OmronPeripheralManager.sharedManager(this).setConfiguration(config);

        ArrayList<Integer> userList = new ArrayList<>();
        userList.add(1);

        final boolean[] hasReplied = {false};
        OmronPeripheralManager.sharedManager(this)
                .startDataTransferFromPeripheral(currentPeripheral, userList, true,
                        (peripheral, errorInfo) -> {
                            if (hasReplied[0]) return;
                            if (errorInfo.isSuccess()) {
                                OmronPeripheralManager.sharedManager(this)
                                        .endDataTransferFromPeripheral((p, e) -> {
                                            if (e.isSuccess()) {
                                                HashMap<String, Object> data = new HashMap<>();
                                                data.put("vitalData", p.getVitalData());   // <-- This is not a List
                                                data.put("deviceInfo", p.getDeviceInformation());
                                                data.put("deviceSettings", new ArrayList<>(p.getDeviceSettings()));
//                                                result.success(data)
                                                result.success(data);
                                            } else {
                                                result.error("TRANSFER_ERROR", e.getMessageInfo(), null);
                                            }
                                        });
                            } else {
                                result.error("TRANSFER_ERROR", errorInfo.getMessageInfo(), null);
                            }
                            hasReplied[0] = true;
                        });
    }

    private void setUserHashId(String userHashId, MethodChannel.Result result) {
        this.currentUserHashId = userHashId; // Update the instance variable
        OmronPeripheralManagerConfig config = OmronPeripheralManager.sharedManager(this).getConfiguration();
        config.userHashId = userHashId;
        OmronPeripheralManager.sharedManager(this).setConfiguration(config);
        result.success("User hash ID set to " + userHashId);
    }

    private final BroadcastReceiver mPairingRequestReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            final String action = intent.getAction();
            if (BluetoothDevice.ACTION_PAIRING_REQUEST.equals(action)) {
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                int pairingVariant = intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT, BluetoothDevice.ERROR);
                int variant = intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT, BluetoothDevice.ERROR);

                Log.d("OMRON_PAIRING", "Pairing request for: " + device.getName());

                if (variant == BluetoothDevice.PAIRING_VARIANT_PIN) {
                    device.setPin("0000".getBytes()); // many Omron devices use 0000
                    abortBroadcast(); // auto-confirm
                }
                Log.d("OMRON_PAIRING", "Pairing request for device: " + device.getName() + " variant: " + pairingVariant);
            }
        }
    };
}


